name: Prebuilt Release

on:
  push:
    branches:
      - main
    paths:
      - mapping.json
      - .github/workflows/prebuilt-release.yml

permissions:
  contents: write

concurrency:
  group: prebuilt-release
  cancel-in-progress: true

env:
  RELEASE_TAG: prebuilt

jobs:
  plan:
    name: Plan missing assets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      has_missing: ${{ steps.matrix.outputs.has_missing }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends jq

      - name: Ensure release exists (reuse, do not recreate if exists)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if gh release view "${RELEASE_TAG}" >/dev/null 2>&1; then
            echo "Release '${RELEASE_TAG}' exists. Reusing it."
          else
            echo "Creating release '${RELEASE_TAG}' on main..."
            gh release create "${RELEASE_TAG}" \
              --target main \
              --title "NDK Clang Prebuilts (from mapping.json)" \
              --notes "Auto-created placeholder for repackaged clang prebuilts from mapping.json." \
              --latest || true
          fi

      - name: Build matrix of missing assets
        id: matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          HOSTS=(linux-x86 darwin-x86 windows-x86)
          ASSET_NAMES=$(gh release view "${RELEASE_TAG}" --json assets -q '.assets[].name' || true)

          TMP=$(mktemp)
          : > "$TMP"

          # Iterate mapping and collect missing tuples
          while read -r NDK_TAG CLANG_REV; do
            for H in "${HOSTS[@]}"; do
              OUTFILE="clang-${H}-ndk-${NDK_TAG}-${CLANG_REV}.tar.zst"
              SHAFILE="${OUTFILE}.sha256"
              if echo "$ASSET_NAMES" | grep -qx "$OUTFILE" && echo "$ASSET_NAMES" | grep -qx "$SHAFILE"; then
                continue
              fi
              jq -nc --arg host "$H" --arg ndk "$NDK_TAG" --arg rev "$CLANG_REV" '{host:$host, ndk_tag:$ndk, clang_rev:$rev}' >> "$TMP"
            done
          done < <(jq -r '.mapping | to_entries[] | "\(.key) \(.value)"' mapping.json)

          if [[ -s "$TMP" ]]; then
            MATRIX=$(jq -cs '{include: .}' "$TMP")
            echo "has_missing=true" >> "$GITHUB_OUTPUT"
          else
            MATRIX='{"include":[]}'
            echo "has_missing=false" >> "$GITHUB_OUTPUT"
          fi

          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  build:
    name: Build asset ${{ matrix.host }} ndk-${{ matrix.ndk_tag }} ${{ matrix.clang_rev }}
    runs-on: ubuntu-latest
    needs: plan
    if: needs.plan.outputs.has_missing == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.plan.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends zstd jq

      - name: Ensure release exists (reuse, do not recreate if exists)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if gh release view "${RELEASE_TAG}" >/dev/null 2>&1; then
            echo "Release '${RELEASE_TAG}' exists. Reusing it."
          else
            echo "Creating release '${RELEASE_TAG}' on main..."
            gh release create "${RELEASE_TAG}" \
              --target main \
              --title "NDK Clang Prebuilts (from mapping.json)" \
              --notes "Auto-created placeholder for repackaged clang prebuilts from mapping.json." \
              --latest || true
          fi

      - name: Build one missing asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          HOST='${{ matrix.host }}'
          NDK_TAG='${{ matrix.ndk_tag }}'
          CLANG_REV='${{ matrix.clang_rev }}'

          OUTFILE="clang-${HOST}-ndk-${NDK_TAG}-${CLANG_REV}.tar.zst"
          SHAFILE="${OUTFILE}.sha256"

          mkdir -p work/${HOST}/src work/${HOST}/out

          # Double-check existence to avoid races
          ASSET_NAMES=$(gh release view "${RELEASE_TAG}" --json assets -q '.assets[].name' || true)
          if echo "$ASSET_NAMES" | grep -qx "$OUTFILE" && echo "$ASSET_NAMES" | grep -qx "$SHAFILE"; then
            echo "Already present; skipping ${OUTFILE}."
            exit 0
          fi

          ARCHIVE_URL="https://android.googlesource.com/platform/prebuilts/clang/host/${HOST}/+archive/refs/tags/ndk-${NDK_TAG}/clang-${CLANG_REV}.tar.gz"
          echo "Downloading via +archive: ${ARCHIVE_URL}"
          curl -fL --retry 3 --connect-timeout 15 -o work/${HOST}/src/clang-${CLANG_REV}.tar.gz "${ARCHIVE_URL}"

          echo "Extracting clang-${CLANG_REV}.tar.gz ..."
          tar -C work/${HOST}/out -xzf work/${HOST}/src/clang-${CLANG_REV}.tar.gz

          echo "Repacking to zstd (reproducible)..."
          export TZ=UTC
          export LC_ALL=C
          export SOURCE_DATE_EPOCH=0
          tar \
            --format=gnu \
            --sort=name \
            --owner=0 --group=0 --numeric-owner \
            --mtime='@0' \
            -C work/${HOST}/out \
            -I 'zstd -6 -T0 --no-progress' \
            -cf work/${HOST}/${OUTFILE} .

          echo "Computing SHA256..."
          (cd work/${HOST} && sha256sum "${OUTFILE}") > work/${HOST}/"${OUTFILE}.sha256"

          echo "new_tar=work/${HOST}/${OUTFILE}" >> "$GITHUB_OUTPUT"
          echo "new_sha=work/${HOST}/${OUTFILE}.sha256" >> "$GITHUB_OUTPUT"

      - name: Upload asset to prebuilt release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          TAR_PATH="work/${{ matrix.host }}/clang-${{ matrix.host }}-ndk-${{ matrix.ndk_tag }}-${{ matrix.clang_rev }}.tar.zst"
          SHA_PATH="${TAR_PATH}.sha256"
          echo "Uploading ${TAR_PATH} and ${SHA_PATH} to '${RELEASE_TAG}'..."
          gh release upload "${RELEASE_TAG}" "$TAR_PATH" "$SHA_PATH" --clobber=false

  update-notes:
    name: Update release notes from mapping.json
    runs-on: ubuntu-latest
    needs: [plan, build]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends jq

      - name: Ensure prebuilt release exists (reuse, do not recreate if exists)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          if gh release view "${RELEASE_TAG}" >/dev/null 2>&1; then
            echo "Release '${RELEASE_TAG}' exists."
          else
            echo "Creating release '${RELEASE_TAG}' on main..."
            gh release create "${RELEASE_TAG}" \
              --target main \
              --title "NDK Clang Prebuilts (from mapping.json)" \
              --notes "Auto-created placeholder for repackaged clang prebuilts from mapping.json." \
              --latest
          fi

      - name: Generate and update release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          HOSTS=(linux-x86 darwin-x86 windows-x86)
          ASSET_NAMES=$(gh release view "${RELEASE_TAG}" --json assets -q '.assets[].name' || true)

          NOTES_FILE=notes.txt
          {
            echo "This release contains repackaged Android clang prebuilts from android.googlesource.com."
            echo
            echo "Files are re-compressed to .tar.zst with zstd -6 using reproducible tar options."
            echo
            echo "## Assets from mapping.json"
            echo "(Generated automatically based on current release assets and mapping.json)"
            echo
          } > "$NOTES_FILE"

          # Iterate mapping entries and list available hosts for each
          while read -r NDK_TAG CLANG_REV; do
            PRESENT_HOSTS=()
            for H in "${HOSTS[@]}"; do
              NAME="clang-${H}-ndk-${NDK_TAG}-${CLANG_REV}.tar.zst"
              if echo "$ASSET_NAMES" | grep -qx "$NAME"; then
                PRESENT_HOSTS+=("$H")
              fi
            done
            if [[ ${#PRESENT_HOSTS[@]} -gt 0 ]]; then
              echo "### ndk-${NDK_TAG} (${CLANG_REV})" >> "$NOTES_FILE"
              for H in "${PRESENT_HOSTS[@]}"; do
                echo "- ${H}" >> "$NOTES_FILE"
              done
              echo >> "$NOTES_FILE"
            fi
          done < <(jq -r '.mapping | to_entries[] | "\(.key) \(.value)"' mapping.json)

          echo "Updating release notes..."
          gh release edit "${RELEASE_TAG}" --notes-file "$NOTES_FILE"
